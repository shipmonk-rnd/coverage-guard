#!/usr/bin/env php
<?php declare(strict_types=1);

use ShipMonk\CoverageGuard\ConsoleOutput;
use ShipMonk\CoverageGuard\CoverageGuard;
use ShipMonk\CoverageGuard\Initializer;
use ShipMonk\CoverageGuard\PhpSyntaxHighlighter;

$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadPaths as $autoloadPath) {
    if (file_exists($autoloadPath)) {
        require $autoloadPath;
        break;
    }
}

try {
    $cwd = getcwd() ? : throw new LogicException('Cannot determine current working directory');

    $output = new ConsoleOutput();
    $highlighter = new PhpSyntaxHighlighter();
    $initializer = new Initializer();
    $initResult = $initializer->initialize($cwd, $argv);

    $guard = new CoverageGuard($initResult->config);
    $untestedBlocks = $guard->checkCoverage($initResult->coverageFile, $initResult->patchFile);

    if (count($untestedBlocks) === 0) {
        $message = $initResult->patchFile !== null
            ? '✅ All changed methods are covered by tests'
            : '✅ All methods are covered by tests';
        $output->writeLine($message);
        exit(0);
    }

    foreach ($untestedBlocks as $block) {
        $output->writeLine("Untested {$block->type->name} block in file {$block->path}:");
        $output->writeLine($highlighter->highlight($block->getBlockCode()));
        $output->writeLine('');
    }

    $output->writeErrorLine('❌ Found ' . count($untestedBlocks) . ' untested code block(s)');
    exit(1);

} catch (Throwable $e) {
    $output->writeErrorLine('⚠️  Error: ' . $e->getMessage());
    exit(1);
}
