#!/usr/bin/env php
<?php declare(strict_types=1);

use ShipMonk\CoverageGuard\ConsoleOutput;
use ShipMonk\CoverageGuard\CoverageGuard;
use ShipMonk\CoverageGuard\PhpSyntaxHighlighter;

$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadPaths as $autoloadPath) {
    if (file_exists($autoloadPath)) {
        require $autoloadPath;
        break;
    }
}

$output = new ConsoleOutput();
$highlighter = new PhpSyntaxHighlighter();

$options = getopt('', ['patch:']);

if ($argc < 2) {
    $output->writeErrorLine('Usage: coverage-guard <clover-coverage.xml> [--patch <changes.patch>]');
    exit(1);
}

$coverageFile = $argv[1];
$patchFile = $options['patch'] ?? null;

if (!is_file($coverageFile)) {
    $output->writeErrorLine("Coverage file not found: {$coverageFile}");
    exit(1);
}

if ($patchFile !== null && !is_file($patchFile)) {
    $output->writeErrorLine("Patch file not found: {$patchFile}");
    exit(1);
}

try {
    $guard = new CoverageGuard();
    $untestedBlocks = $guard->checkCoverage($coverageFile, $patchFile);

    if (count($untestedBlocks) === 0) {
        $message = $patchFile !== null
            ? '✅ All changed methods are covered by tests'
            : '✅ All methods are covered by tests';
        $output->writeLine($message);
        exit(0);
    }

    foreach ($untestedBlocks as $block) {
        $output->writeLine("Untested {$block->type->name} block in file {$block->path}:");
        $output->writeLine($highlighter->highlight($block->getBlockCode()));
        $output->writeLine('');
    }

    $output->writeErrorLine('❌ Found ' . count($untestedBlocks) . ' untested code block(s)');
    exit(1);

} catch (Throwable $e) {
    $output->writeErrorLine('⚠️ Error: ' . $e->getMessage());
    exit(1);
}
